[{"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js":"3","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx":"4","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx":"5","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx":"6","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js":"7","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js":"8","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js":"9"},{"size":345,"mtime":1611507960348,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610904982735,"results":"12","hashOfConfig":"11"},{"size":546,"mtime":1613153192086,"results":"13","hashOfConfig":"11"},{"size":2499,"mtime":1613494829218,"results":"14","hashOfConfig":"11"},{"size":4826,"mtime":1613146239282,"results":"15","hashOfConfig":"11"},{"size":2964,"mtime":1613066466282,"results":"16","hashOfConfig":"11"},{"size":4520,"mtime":1613144847744,"results":"17","hashOfConfig":"11"},{"size":582,"mtime":1613144690237,"results":"18","hashOfConfig":"11"},{"size":4664,"mtime":1613497720012,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"sr6iu6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js",[],["43","44"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js",[],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx",["45","46"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx",["47","48","49"],"import './css/cuadricula.css'\r\nimport Celda from './Celda';\r\nimport bfs from './algoritmos/bfs';\r\nimport dijkstra from './algoritmos/dijkstra'\r\nimport { useEffect } from 'react';\r\n\r\n\r\nfunction mostrarAnimaciones(animaciones, timers, velocidad){\r\n    let aux = 0\r\n    for(let i = 0;i < animaciones.length && \r\n    (animaciones[i].clase === 'celdaVisitada' || animaciones[i].clase === 'celdaVisitadaConPeso'); i++){\r\n        timers.push(\r\n            setTimeout(() =>{\r\n                document.getElementById(animaciones[i].posicion).className = animaciones[i].clase\r\n            }, i * velocidad))\r\n        aux = i\r\n    }\r\n    for(let i = aux;i < animaciones.length; i++){\r\n        timers.push(\r\n            setTimeout(() =>{\r\n                document.getElementById(animaciones[i].posicion).className = animaciones[i].clase\r\n                if(i == animaciones.length -1 ){\r\n                    intercambioBotonesHabilitados()\r\n                }\r\n            }, i * velocidad))\r\n    }\r\n}\r\n\r\nfunction reiniciarCamino(){\r\n    var id = 0\r\n    for(var i = 0; i < 17; i++){\r\n        for(var j = 0; j < 38; j++){\r\n            let elemento = document.getElementById(id++)\r\n            if(elemento.className === 'celdaVisitada') elemento.className = 'celdaLibre'\r\n            else if(elemento.className === 'celdaVisitadaConPeso') elemento.className = 'celdaConPeso'\r\n            else if(elemento.className === 'puntoFinalVisitado') elemento.className = 'puntoFinal'\r\n            else if(elemento.className === 'celdaCamino') elemento.className = 'celdaLibre'\r\n        }\r\n    }\r\n}\r\n\r\nfunction detenerVisualizacion(timers){\r\n    for(var i = 0; i < timers.length; i++){\r\n        clearTimeout(timers[i])\r\n    }\r\n    timers = []\r\n    setTimeout(() =>{\r\n        reiniciarCamino()\r\n        intercambioBotonesHabilitados()\r\n    },100)\r\n}\r\n\r\nfunction intercambioBotonesHabilitados(){\r\n    document.getElementById('botonDetener').disabled = !document.getElementById('botonDetener').disabled\r\n    document.getElementById('botonInicio').disabled = !document.getElementById('botonInicio').disabled\r\n    document.getElementById('selectAlgoritmo').disabled = !document.getElementById('selectAlgoritmo').disabled\r\n    document.getElementById('selectVelocidad').disabled = !document.getElementById('selectVelocidad').disabled\r\n    document.getElementById('botonReiniciarCuadricula').disabled = !document.getElementById('botonReiniciarCuadricula').disabled\r\n    document.getElementById('botonReiniciarCamino').disabled = !document.getElementById('botonReiniciarCamino').disabled\r\n    document.getElementById('dropdownPatronCaminos').disabled = !document.getElementById('dropdownPatronCaminos').disabled\r\n}\r\n\r\nfunction Cuadricula() {\r\n    var cuadricula = new Array(17);\r\n    var id = 0\r\n    var clase = '';\r\n    for(var i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38);\r\n        for(var j = 0; j < cuadricula[i].length; j++){\r\n            cuadricula[i][j] = id++;\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        var timers = []\r\n        document.getElementById('botonInicio').onclick = () =>{\r\n            intercambioBotonesHabilitados()\r\n            reiniciarCamino()\r\n            let algoritmo = document.getElementById('selectAlgoritmo').value\r\n            let velocidad = document.getElementById('selectVelocidad').value\r\n            let animaciones \r\n            if(algoritmo === 'bfs') animaciones = bfs();\r\n            else if(algoritmo === 'dijkstra') animaciones = dijkstra();\r\n            setTimeout(() =>{\r\n                mostrarAnimaciones(animaciones, timers, velocidad)\r\n            }, 500)\r\n            \r\n        }\r\n        document.getElementById('botonReiniciarCamino').onclick = () =>{\r\n            reiniciarCamino()\r\n        }\r\n        document.getElementById('botonDetener').onclick = () =>{\r\n            detenerVisualizacion(timers)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {cuadricula.map((valor, indice) => {\r\n                return (\r\n                    <div className='d-flex justify-content-start' draggable = {false} key = {indice}>\r\n                        {\r\n                            valor.map((valor, indice) => {\r\n                                if(valor == 0) clase = 'puntoInicio';\r\n                                else if (valor == cuadricula.length * cuadricula[0].length - 1) clase = 'puntoFinal';\r\n                                else clase = 'celdaLibre';\r\n                                return (\r\n                                    <Celda className={clase} key={valor} id = {valor}>\r\n                                    </Celda>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    );\r\n}\r\nexport default Cuadricula;","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx",["50","51","52","53","54","55","56","57"],"import React from 'react';\r\n\r\n\r\nfunction visualizacionEnCurso(){\r\n    if(document.getElementById('botonInicio').disabled) return true\r\n    else return false\r\n}\r\n\r\nfunction allowDrop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    evento.stopPropagation();\r\n}\r\n\r\nfunction drag(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.dataTransfer.setData(\"text\", evento.target.id);\r\n}\r\n\r\nfunction drop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    var data = evento.dataTransfer.getData(\"text\");\r\n    var elemento = document.getElementById(data);\r\n    if(elemento == null || evento.target.className == 'puntoInicio' || evento.target.className == 'puntoFinal') return;\r\n    else{\r\n        evento.target.className = elemento.className;\r\n        evento.target.ondragstart = drag;\r\n        evento.target.draggable = true;\r\n        elemento.className = 'celdaLibre';\r\n        elemento.ondragstart = null;\r\n        elemento.draggable = false;\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnPared(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaOcupada'\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnCeldaLibre(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaLibre';\r\n    } \r\n}\r\n\r\nfunction convertirEnCeldaConPeso(celda){\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaConPeso';\r\n    }\r\n}\r\n\r\nfunction Celda(props) {\r\n    return(\r\n        <div className = {props.className} id = {props.id}\r\n        draggable = {(props.className === 'puntoInicio' || props.className === 'puntoFinal')? true: false}\r\n        onDragStart = {(evento) =>{\r\n            if(props.className === 'puntoInicio' || props.className === 'puntoFinal'){\r\n                drag(evento)\r\n            }\r\n        }}\r\n        onDrop = {(evento) =>{\r\n            drop(evento)\r\n        }}\r\n        onDragOver = {(evento) =>{\r\n            allowDrop(evento)\r\n        }}\r\n        onMouseEnter={(evento) => {\r\n            if (evento.shiftKey && evento.buttons === 1) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey && evento.buttons === 1){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else if (evento.buttons === 1) {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}\r\n        onMouseDown={(evento) => {\r\n            if (evento.shiftKey) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}>\r\n        </div>\r\n    )\r\n}\r\nexport default Celda;","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js",["58"],"import verificadorPosiciones from './verificadorPosiciones'\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\n\r\n\r\n\r\n\r\nfunction recrearCamino(posicion){\r\n    if(cuadricula[posicion.i][posicion.j].distancia === 0){\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }else{\r\n        let aux = 0\r\n        var posicionSiguiente\r\n        while(aux < 4){\r\n            posicionSiguiente = {i: posicion.i, j: posicion.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionExistente(posicionSiguiente) && cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia ===\r\n            cuadricula[posicion.i][posicion.j].distancia -1){\r\n                break\r\n            }\r\n            aux++\r\n        }\r\n        recrearCamino({i: posicionSiguiente.i, j: posicionSiguiente.j})\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }\r\n}\r\n\r\nfunction bfs(){\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    inicio.distancia = 0\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, clase: document.getElementById(id).className, distancia: -1}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    let fin = false\r\n    var cola = [{i: i, j: j}]\r\n    while(cola.length > 0){\r\n        let posicionActual = cola.shift();\r\n        let aux = 0\r\n        while(aux < 4){\r\n            let posicionSiguiente = {i: posicionActual.i, j: posicionActual.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionValida(posicionSiguiente, cuadricula)){\r\n                cola.push(posicionSiguiente)\r\n                if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaLibre'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaConPeso'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'puntoFinal'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'puntoFinal'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                    if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia > 1){\r\n                        recrearCamino({i: posicionActual.i, j: posicionActual.j})\r\n                    }\r\n                    fin = true\r\n                    break\r\n                }\r\n\r\n            }\r\n            aux += 1\r\n        }\r\n        if(fin) break\r\n    }\r\n    return animaciones\r\n}\r\nexport default bfs","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js",["59"],"function posicionValida(posicion, cuadricula){\r\n    if(posicionExistente(posicion) && \r\n        (cuadricula[posicion.i][posicion.j].clase === 'celdaLibre' ||\r\n        cuadricula[posicion.i][posicion.j].clase === 'celdaConPeso'  ||\r\n        cuadricula[posicion.i][posicion.j].clase === 'puntoFinal')){\r\n        return true\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction posicionExistente(posicion){\r\n    if(posicion.i < 17 && posicion.i >= 0 && posicion.j < 38 && posicion.j >= 0) return true\r\n    else return false\r\n}\r\n\r\nexport default {posicionValida, posicionExistente}","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":11,"column":21,"nodeType":"68","endLine":11,"endColumn":83},{"ruleId":"66","severity":1,"message":"69","line":50,"column":21,"nodeType":"68","endLine":50,"endColumn":67},{"ruleId":"70","severity":1,"message":"71","line":22,"column":22,"nodeType":"72","messageId":"73","endLine":22,"endColumn":24},{"ruleId":"70","severity":1,"message":"71","line":104,"column":42,"nodeType":"72","messageId":"73","endLine":104,"endColumn":44},{"ruleId":"70","severity":1,"message":"71","line":105,"column":48,"nodeType":"72","messageId":"73","endLine":105,"endColumn":50},{"ruleId":"70","severity":1,"message":"71","line":25,"column":52,"nodeType":"72","messageId":"73","endLine":25,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":25,"column":96,"nodeType":"72","messageId":"73","endLine":25,"endColumn":98},{"ruleId":"70","severity":1,"message":"74","line":39,"column":24,"nodeType":"72","messageId":"73","endLine":39,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":39,"column":60,"nodeType":"72","messageId":"73","endLine":39,"endColumn":62},{"ruleId":"70","severity":1,"message":"74","line":47,"column":24,"nodeType":"72","messageId":"73","endLine":47,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":47,"column":60,"nodeType":"72","messageId":"73","endLine":47,"endColumn":62},{"ruleId":"70","severity":1,"message":"74","line":54,"column":24,"nodeType":"72","messageId":"73","endLine":54,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":54,"column":60,"nodeType":"72","messageId":"73","endLine":54,"endColumn":62},{"ruleId":"70","severity":1,"message":"71","line":50,"column":19,"nodeType":"72","messageId":"73","endLine":50,"endColumn":21},{"ruleId":"75","severity":1,"message":"76","line":18,"column":1,"nodeType":"77","endLine":18,"endColumn":51},{"ruleId":"70","severity":1,"message":"71","line":24,"column":19,"nodeType":"72","messageId":"73","endLine":24,"endColumn":21},{"ruleId":"70","severity":1,"message":"74","line":58,"column":26,"nodeType":"72","messageId":"73","endLine":58,"endColumn":28},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","JSXOpeningElement","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]