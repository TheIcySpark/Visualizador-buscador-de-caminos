[{"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js":"3","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx":"4","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx":"5","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx":"6","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js":"7","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js":"8","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js":"9","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dfs.js":"10"},{"size":345,"mtime":1611507960348,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1610904982735,"results":"13","hashOfConfig":"12"},{"size":546,"mtime":1613153192086,"results":"14","hashOfConfig":"12"},{"size":2603,"mtime":1613573779087,"results":"15","hashOfConfig":"12"},{"size":5614,"mtime":1613579069831,"results":"16","hashOfConfig":"12"},{"size":2964,"mtime":1613066466282,"results":"17","hashOfConfig":"12"},{"size":4514,"mtime":1613499491536,"results":"18","hashOfConfig":"12"},{"size":653,"mtime":1613576296835,"results":"19","hashOfConfig":"12"},{"size":4664,"mtime":1613497720012,"results":"20","hashOfConfig":"12"},{"size":2674,"mtime":1613576229503,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"sr6iu6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js",[],["46","47"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js",[],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx",["48","49"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx",["50","51","52"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx",["53","54","55","56","57","58","59","60"],"import React from 'react';\r\n\r\n\r\nfunction visualizacionEnCurso(){\r\n    if(document.getElementById('botonInicio').disabled) return true\r\n    else return false\r\n}\r\n\r\nfunction allowDrop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    evento.stopPropagation();\r\n}\r\n\r\nfunction drag(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.dataTransfer.setData(\"text\", evento.target.id);\r\n}\r\n\r\nfunction drop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    var data = evento.dataTransfer.getData(\"text\");\r\n    var elemento = document.getElementById(data);\r\n    if(elemento == null || evento.target.className == 'puntoInicio' || evento.target.className == 'puntoFinal') return;\r\n    else{\r\n        evento.target.className = elemento.className;\r\n        evento.target.ondragstart = drag;\r\n        evento.target.draggable = true;\r\n        elemento.className = 'celdaLibre';\r\n        elemento.ondragstart = null;\r\n        elemento.draggable = false;\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnPared(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaOcupada'\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnCeldaLibre(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaLibre';\r\n    } \r\n}\r\n\r\nfunction convertirEnCeldaConPeso(celda){\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaConPeso';\r\n    }\r\n}\r\n\r\nfunction Celda(props) {\r\n    return(\r\n        <div className = {props.className} id = {props.id}\r\n        draggable = {(props.className === 'puntoInicio' || props.className === 'puntoFinal')? true: false}\r\n        onDragStart = {(evento) =>{\r\n            if(props.className === 'puntoInicio' || props.className === 'puntoFinal'){\r\n                drag(evento)\r\n            }\r\n        }}\r\n        onDrop = {(evento) =>{\r\n            drop(evento)\r\n        }}\r\n        onDragOver = {(evento) =>{\r\n            allowDrop(evento)\r\n        }}\r\n        onMouseEnter={(evento) => {\r\n            if (evento.shiftKey && evento.buttons === 1) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey && evento.buttons === 1){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else if (evento.buttons === 1) {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}\r\n        onMouseDown={(evento) => {\r\n            if (evento.shiftKey) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}>\r\n        </div>\r\n    )\r\n}\r\nexport default Celda;","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js",["61"],"import verificadorPosiciones from './verificadorPosiciones'\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\n\r\nfunction recrearCamino(posicion){\r\n    if(cuadricula[posicion.i][posicion.j].distancia === 0){\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }else{\r\n        let aux = 0\r\n        var posicionSiguiente\r\n        while(aux < 4){\r\n            posicionSiguiente = {i: posicion.i, j: posicion.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionExistente(posicionSiguiente) && cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia ===\r\n            cuadricula[posicion.i][posicion.j].distancia -1){\r\n                break\r\n            }\r\n            aux++\r\n        }\r\n        recrearCamino({i: posicionSiguiente.i, j: posicionSiguiente.j})\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }\r\n}\r\n\r\nfunction bfs(){\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    inicio.distancia = 0\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, clase: document.getElementById(id).className, distancia: -1}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    let fin = false\r\n    var cola = [{i: i, j: j}]\r\n    while(cola.length > 0){\r\n        let posicionActual = cola.shift();\r\n        let aux = 0\r\n        while(aux < 4){\r\n            let posicionSiguiente = {i: posicionActual.i, j: posicionActual.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionValida(posicionSiguiente, cuadricula)){\r\n                cola.push(posicionSiguiente)\r\n                if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaLibre'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaConPeso'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'puntoFinal'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'puntoFinal'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                    if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia > 1){\r\n                        recrearCamino({i: posicionActual.i, j: posicionActual.j})\r\n                    }\r\n                    fin = true\r\n                    break\r\n                }\r\n\r\n            }\r\n            aux += 1\r\n        }\r\n        if(fin) break\r\n    }\r\n    return animaciones\r\n}\r\nexport default bfs","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js",["62"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js",["63","64"],"import verificadorPosiciones from './verificadorPosiciones'\r\nvar PriorityQueue  = require('priorityqueuejs')\r\nvar colaPrioridad\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\n\r\nfunction inicializacion(){\r\n    colaPrioridad = new PriorityQueue(function(a, b){\r\n        return b.distancia - a.distancia\r\n    })\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, visitado: false, distancia: 100000, previo: -1, i: i, j: j,\r\n            clase: document.getElementById(id).className}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    cuadricula[i][j].distancia = 0\r\n    cuadricula[i][j].previo = {i: i, j: j}\r\n    colaPrioridad.enq({distancia: cuadricula[i][j].distancia, id: cuadricula[i][j].id, visitado: cuadricula[i][j].visitado,\r\n    previo: {i: i, j: j}, i: cuadricula[i][j].i, j: cuadricula[i][j].j, clase: cuadricula[i][j].clase})\r\n}\r\n\r\nfunction obtenerPeso(posicion){\r\n    if(posicion.clase === 'celdaLibre' || posicion.clase === 'puntoFinal') return 1\r\n    else if(posicion.clase === 'celdaConPeso') return 10\r\n}\r\n\r\nfunction relajacion(posicionActual, posicionSiguiente){\r\n    let peso = obtenerPeso(posicionSiguiente)\r\n    console.log(peso)\r\n    if(posicionActual.distancia + peso < posicionSiguiente.distancia){\r\n        posicionSiguiente.distancia = posicionActual.distancia + peso\r\n        posicionSiguiente.previo = {i: posicionActual.i, j: posicionActual.j}\r\n        cuadricula[posicionSiguiente.i][posicionSiguiente.j] = posicionSiguiente\r\n        colaPrioridad.enq(posicionSiguiente)\r\n    }\r\n}\r\n\r\nfunction recrearCamino(posicion){\r\n    while(posicion.clase != 'puntoInicio'){\r\n        animacion = {}\r\n        animacion.posicion = posicion.id\r\n        if(posicion.clase === 'celdaLibre') animacion.clase = 'celdaCamino'\r\n        else if(posicion.clase === 'celdaConPeso') animacion.clase = 'celdaCaminoConPeso'\r\n        animaciones.push(animacion)\r\n        posicion = cuadricula[posicion.previo.i][posicion.previo.j]\r\n    }\r\n}\r\n\r\nfunction dijkstra(){\r\n    inicializacion()\r\n    let posicionActual\r\n    while(colaPrioridad.size() > 0){\r\n        posicionActual = colaPrioridad.peek()\r\n        colaPrioridad.deq()\r\n        if(cuadricula[posicionActual.i][posicionActual.j].visitado) continue\r\n        cuadricula[posicionActual.i][posicionActual.j].visitado = true\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicionActual.i][posicionActual.j].id\r\n        if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaLibre') animacion.clase = 'celdaVisitada'\r\n        else if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaConPeso') animacion.clase = 'celdaVisitadaConPeso'\r\n\r\n        if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaConPeso' ||\r\n        cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaLibre') animaciones.push(animacion)\r\n        if(posicionActual.clase === 'puntoFinal') break\r\n        let i = 0\r\n        while(i < 4){\r\n            let posicionAdyacente = {i: posicionActual.i, j: posicionActual.j}\r\n            posicionAdyacente.i += movs[i][0]\r\n            posicionAdyacente.j += movs[i][1]\r\n            if(verificadorPosiciones.posicionValida({i: posicionAdyacente.i, j: posicionAdyacente.j}, cuadricula)){\r\n                posicionAdyacente.distancia = cuadricula[posicionAdyacente.i][posicionAdyacente.j].distancia\r\n                posicionAdyacente.visitado = cuadricula[posicionAdyacente.i][posicionAdyacente.j].visitado\r\n                posicionAdyacente.clase = cuadricula[posicionAdyacente.i][posicionAdyacente.j].clase\r\n                posicionAdyacente.previo = cuadricula[posicionAdyacente.i][posicionAdyacente.j].previo\r\n                posicionAdyacente.id = cuadricula[posicionAdyacente.i][posicionAdyacente.j].id\r\n                if(cuadricula[posicionAdyacente.i][posicionAdyacente.j].visitado === false){\r\n                    relajacion(posicionActual, posicionAdyacente)\r\n                }\r\n            }\r\n            i++\r\n        }\r\n    }\r\n    if(posicionActual.clase === 'puntoFinal') recrearCamino(cuadricula[posicionActual.previo.i][posicionActual.previo.j])\r\n    return animaciones\r\n}\r\nexport default dijkstra","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dfs.js",["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":11,"column":21,"nodeType":"73","endLine":11,"endColumn":83},{"ruleId":"71","severity":1,"message":"74","line":53,"column":21,"nodeType":"73","endLine":53,"endColumn":67},{"ruleId":"75","severity":1,"message":"76","line":27,"column":22,"nodeType":"77","messageId":"78","endLine":27,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":125,"column":42,"nodeType":"77","messageId":"78","endLine":125,"endColumn":44},{"ruleId":"75","severity":1,"message":"76","line":126,"column":48,"nodeType":"77","messageId":"78","endLine":126,"endColumn":50},{"ruleId":"75","severity":1,"message":"76","line":25,"column":52,"nodeType":"77","messageId":"78","endLine":25,"endColumn":54},{"ruleId":"75","severity":1,"message":"76","line":25,"column":96,"nodeType":"77","messageId":"78","endLine":25,"endColumn":98},{"ruleId":"75","severity":1,"message":"79","line":39,"column":24,"nodeType":"77","messageId":"78","endLine":39,"endColumn":26},{"ruleId":"75","severity":1,"message":"79","line":39,"column":60,"nodeType":"77","messageId":"78","endLine":39,"endColumn":62},{"ruleId":"75","severity":1,"message":"79","line":47,"column":24,"nodeType":"77","messageId":"78","endLine":47,"endColumn":26},{"ruleId":"75","severity":1,"message":"79","line":47,"column":60,"nodeType":"77","messageId":"78","endLine":47,"endColumn":62},{"ruleId":"75","severity":1,"message":"79","line":54,"column":24,"nodeType":"77","messageId":"78","endLine":54,"endColumn":26},{"ruleId":"75","severity":1,"message":"79","line":54,"column":60,"nodeType":"77","messageId":"78","endLine":54,"endColumn":62},{"ruleId":"75","severity":1,"message":"76","line":47,"column":19,"nodeType":"77","messageId":"78","endLine":47,"endColumn":21},{"ruleId":"80","severity":1,"message":"81","line":19,"column":1,"nodeType":"82","endLine":19,"endColumn":51},{"ruleId":"75","severity":1,"message":"76","line":24,"column":19,"nodeType":"77","messageId":"78","endLine":24,"endColumn":21},{"ruleId":"75","severity":1,"message":"79","line":58,"column":26,"nodeType":"77","messageId":"78","endLine":58,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":2,"column":5,"nodeType":"85","messageId":"86","endLine":2,"endColumn":9},{"ruleId":"75","severity":1,"message":"76","line":22,"column":19,"nodeType":"77","messageId":"78","endLine":22,"endColumn":21},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","JSXOpeningElement","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'pila' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]