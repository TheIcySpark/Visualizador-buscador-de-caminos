[{"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js":"3","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx":"4","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx":"5","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx":"6","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js":"7","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js":"8","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js":"9","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dfs.js":"10","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\patronesCaminos.js":"11","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Tutorial.jsx":"12","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\a.js":"13"},{"size":345,"mtime":1611507960348,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1610904982735,"results":"16","hashOfConfig":"15"},{"size":592,"mtime":1614014097712,"results":"17","hashOfConfig":"15"},{"size":2858,"mtime":1615224246214,"results":"18","hashOfConfig":"15"},{"size":6250,"mtime":1615305652504,"results":"19","hashOfConfig":"15"},{"size":2964,"mtime":1613066466282,"results":"20","hashOfConfig":"15"},{"size":4514,"mtime":1613499491536,"results":"21","hashOfConfig":"15"},{"size":653,"mtime":1613576296835,"results":"22","hashOfConfig":"15"},{"size":4664,"mtime":1613497720012,"results":"23","hashOfConfig":"15"},{"size":2674,"mtime":1613576229503,"results":"24","hashOfConfig":"15"},{"size":1009,"mtime":1613587088088,"results":"25","hashOfConfig":"15"},{"size":3743,"mtime":1615215965996,"results":"26","hashOfConfig":"15"},{"size":4635,"mtime":1615305879441,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"sr6iu6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\index.js",[],["64","65"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\App.js",["66"],"import BarraSuperior from './componentes/BarraSuperior';\nimport Cuadricula from './componentes/Cuadricula';\nimport {useSpring, animated} from 'react-spring'\nimport Tutorial from './componentes/Tutorial'\n\nfunction App() {\n    const animacion = useSpring({\n        from: {opacity: 0},\n        opacity: 1,\n        config: {duration: 600}\n    })\n    return (\n        <animated.div style = {animacion}>\n            <div className='py-2'>\n                <BarraSuperior></BarraSuperior>\n            </div>\n            <Cuadricula></Cuadricula>\n        </animated.div>\n    );\n}\n\nexport default App;\n","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\BarraSuperior.jsx",["67","68"],"import { Button} from 'react-bootstrap';\r\nimport React from 'react';\r\nimport imagenAyuda from '../imagenes/ayudar.png';\r\nimport imagenGithub from '../imagenes/github.png';\r\nimport Tutorial from './Tutorial'\r\n\r\nexport default class BarraSuperior extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = 'd-flex justify-content-between'>\r\n                <div className = ''>\r\n                    \r\n                    <Tutorial></Tutorial>\r\n                </div>\r\n                <select className = 'bg-dark text-white  h-50' id = 'selectAlgoritmo'>\r\n                    <option value = 'dfs'>\r\n                        DFS\r\n                    </option>\r\n                    <option value = 'dijkstra'>\r\n                        Algoritmo de Dijkstra\r\n                    </option>\r\n                    <option value = 'bfs'>\r\n                        BFS\r\n                    </option>\r\n                    <option value = 'a*'>\r\n                        A*\r\n                    </option>\r\n                </select>\r\n                <select className = 'bg-dark text-white  h-50' id = 'selectVelocidad'>\r\n                    <option value = '5'>\r\n                        rapido\r\n                    </option>\r\n                    <option value = '50'>\r\n                        intermedio\r\n                    </option>\r\n                    <option value = '75'>\r\n                        lento\r\n                    </option>\r\n                </select>\r\n                <select className = 'bg-dark text-white  h-50' id = 'selectPatronCaminos'>\r\n                    <option value = 'patrones'>\r\n                        Patrones\r\n                    </option>\r\n                    <option value = 'laberintoAleatorio'>\r\n                        Laberinto aleatorio\r\n                    </option>\r\n                    <option value = 'laberintoAleatorioPesos'>\r\n                        Laberinto aleatorio de pesos\r\n                    </option>\r\n                </select>\r\n                <Button className = 'h-50 ' variant = 'info' id = 'botonReiniciarCuadricula'>\r\n                    Reiniciar cuadricula\r\n                </Button>\r\n                <Button className = 'h-50 ' variant = 'info' id = 'botonReiniciarCamino'>\r\n                    Reiniciar camino\r\n                </Button>\r\n                <Button className = 'h-50 ' variant = 'success' id = 'botonInicio'>\r\n                    Iniciar\r\n                </Button>\r\n                <Button className = 'h-50' variant = 'danger' disabled id = 'botonDetener'>\r\n                    Detener\r\n                </Button>\r\n                <a href = 'https://github.com/TheIcySpark/Visualizador-buscador-de-caminos'  draggable = {false}>\r\n                    <img src = {imagenGithub} draggable = {false}></img>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Cuadricula.jsx",["69","70","71"],"C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Celda.jsx",["72","73","74","75","76","77","78","79"],"import React from 'react';\r\n\r\n\r\nfunction visualizacionEnCurso(){\r\n    if(document.getElementById('botonInicio').disabled) return true\r\n    else return false\r\n}\r\n\r\nfunction allowDrop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    evento.stopPropagation();\r\n}\r\n\r\nfunction drag(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.dataTransfer.setData(\"text\", evento.target.id);\r\n}\r\n\r\nfunction drop(evento) {\r\n    if(visualizacionEnCurso()) return\r\n    evento.preventDefault();\r\n    var data = evento.dataTransfer.getData(\"text\");\r\n    var elemento = document.getElementById(data);\r\n    if(elemento == null || evento.target.className == 'puntoInicio' || evento.target.className == 'puntoFinal') return;\r\n    else{\r\n        evento.target.className = elemento.className;\r\n        evento.target.ondragstart = drag;\r\n        evento.target.draggable = true;\r\n        elemento.className = 'celdaLibre';\r\n        elemento.ondragstart = null;\r\n        elemento.draggable = false;\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnPared(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaOcupada'\r\n    }\r\n}\r\n\r\n\r\nfunction convertirEnCeldaLibre(celda) {\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaLibre';\r\n    } \r\n}\r\n\r\nfunction convertirEnCeldaConPeso(celda){\r\n    if(visualizacionEnCurso()) return\r\n    if(celda.className != 'puntoInicio' && celda.className != 'puntoFinal'){\r\n        celda.className = 'celdaConPeso';\r\n    }\r\n}\r\n\r\nfunction Celda(props) {\r\n    return(\r\n        <div className = {props.className} id = {props.id}\r\n        draggable = {(props.className === 'puntoInicio' || props.className === 'puntoFinal')? true: false}\r\n        onDragStart = {(evento) =>{\r\n            if(props.className === 'puntoInicio' || props.className === 'puntoFinal'){\r\n                drag(evento)\r\n            }\r\n        }}\r\n        onDrop = {(evento) =>{\r\n            drop(evento)\r\n        }}\r\n        onDragOver = {(evento) =>{\r\n            allowDrop(evento)\r\n        }}\r\n        onMouseEnter={(evento) => {\r\n            if (evento.shiftKey && evento.buttons === 1) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey && evento.buttons === 1){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else if (evento.buttons === 1) {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}\r\n        onMouseDown={(evento) => {\r\n            if (evento.shiftKey) {\r\n                convertirEnCeldaLibre(evento.target);\r\n            }else if(evento.altKey){\r\n                convertirEnCeldaConPeso(evento.target);\r\n            }else {\r\n                convertirEnPared(evento.target);\r\n            }\r\n        }}>\r\n        </div>\r\n    )\r\n}\r\nexport default Celda;","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\bfs.js",["80"],"import verificadorPosiciones from './verificadorPosiciones'\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\n\r\nfunction recrearCamino(posicion){\r\n    if(cuadricula[posicion.i][posicion.j].distancia === 0){\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }else{\r\n        let aux = 0\r\n        var posicionSiguiente\r\n        while(aux < 4){\r\n            posicionSiguiente = {i: posicion.i, j: posicion.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionExistente(posicionSiguiente) && cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia ===\r\n            cuadricula[posicion.i][posicion.j].distancia -1){\r\n                break\r\n            }\r\n            aux++\r\n        }\r\n        recrearCamino({i: posicionSiguiente.i, j: posicionSiguiente.j})\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaCamino'\r\n        animaciones.push(animacion)\r\n    }\r\n}\r\n\r\nfunction bfs(){\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    inicio.distancia = 0\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, clase: document.getElementById(id).className, distancia: -1}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    let fin = false\r\n    var cola = [{i: i, j: j}]\r\n    while(cola.length > 0){\r\n        let posicionActual = cola.shift();\r\n        let aux = 0\r\n        while(aux < 4){\r\n            let posicionSiguiente = {i: posicionActual.i, j: posicionActual.j}\r\n            posicionSiguiente.i += movs[aux][0]\r\n            posicionSiguiente.j += movs[aux][1]\r\n            if(verificadorPosiciones.posicionValida(posicionSiguiente, cuadricula)){\r\n                cola.push(posicionSiguiente)\r\n                if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaLibre'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'celdaConPeso'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'celdaVisitada'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase = 'celdaVisitada'\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                }else if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].clase === 'puntoFinal'){\r\n                    animacion = {}\r\n                    animacion.posicion = cuadricula[posicionSiguiente.i][posicionSiguiente.j].id\r\n                    animacion.clase = 'puntoFinal'\r\n                    animaciones.push(animacion)\r\n                    cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia = \r\n                            cuadricula[posicionActual.i][posicionActual.j].distancia + 1\r\n                    if(cuadricula[posicionSiguiente.i][posicionSiguiente.j].distancia > 1){\r\n                        recrearCamino({i: posicionActual.i, j: posicionActual.j})\r\n                    }\r\n                    fin = true\r\n                    break\r\n                }\r\n\r\n            }\r\n            aux += 1\r\n        }\r\n        if(fin) break\r\n    }\r\n    return animaciones\r\n}\r\nexport default bfs","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\verificadorPosiciones.js",["81"],"function posicionValida(posicion, cuadricula){\r\n    if(posicionExistente(posicion) && \r\n        (cuadricula[posicion.i][posicion.j].clase === 'celdaLibre' ||\r\n        cuadricula[posicion.i][posicion.j].clase === 'celdaConPeso'  ||\r\n        cuadricula[posicion.i][posicion.j].clase === 'puntoFinal' ||\r\n        cuadricula[posicion.i][posicion.j].clase === 'puntoInicio')){\r\n        return true\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction posicionExistente(posicion){\r\n    if(posicion.i < 17 && posicion.i >= 0 && posicion.j < 38 && posicion.j >= 0) return true\r\n    else return false\r\n}\r\n\r\nexport default {posicionValida, posicionExistente}","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dijkstra.js",["82","83"],"import verificadorPosiciones from './verificadorPosiciones'\r\nvar PriorityQueue  = require('priorityqueuejs')\r\nvar colaPrioridad\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\n\r\nfunction inicializacion(){\r\n    colaPrioridad = new PriorityQueue(function(a, b){\r\n        return b.distancia - a.distancia\r\n    })\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, visitado: false, distancia: 100000, previo: -1, i: i, j: j,\r\n            clase: document.getElementById(id).className}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    cuadricula[i][j].distancia = 0\r\n    cuadricula[i][j].previo = {i: i, j: j}\r\n    colaPrioridad.enq({distancia: cuadricula[i][j].distancia, id: cuadricula[i][j].id, visitado: cuadricula[i][j].visitado,\r\n    previo: {i: i, j: j}, i: cuadricula[i][j].i, j: cuadricula[i][j].j, clase: cuadricula[i][j].clase})\r\n}\r\n\r\nfunction obtenerPeso(posicion){\r\n    if(posicion.clase === 'celdaLibre' || posicion.clase === 'puntoFinal') return 1\r\n    else if(posicion.clase === 'celdaConPeso') return 10\r\n}\r\n\r\nfunction relajacion(posicionActual, posicionSiguiente){\r\n    let peso = obtenerPeso(posicionSiguiente)\r\n    console.log(peso)\r\n    if(posicionActual.distancia + peso < posicionSiguiente.distancia){\r\n        posicionSiguiente.distancia = posicionActual.distancia + peso\r\n        posicionSiguiente.previo = {i: posicionActual.i, j: posicionActual.j}\r\n        cuadricula[posicionSiguiente.i][posicionSiguiente.j] = posicionSiguiente\r\n        colaPrioridad.enq(posicionSiguiente)\r\n    }\r\n}\r\n\r\nfunction recrearCamino(posicion){\r\n    while(posicion.clase != 'puntoInicio'){\r\n        animacion = {}\r\n        animacion.posicion = posicion.id\r\n        if(posicion.clase === 'celdaLibre') animacion.clase = 'celdaCamino'\r\n        else if(posicion.clase === 'celdaConPeso') animacion.clase = 'celdaCaminoConPeso'\r\n        animaciones.push(animacion)\r\n        posicion = cuadricula[posicion.previo.i][posicion.previo.j]\r\n    }\r\n}\r\n\r\nfunction dijkstra(){\r\n    inicializacion()\r\n    let posicionActual\r\n    while(colaPrioridad.size() > 0){\r\n        posicionActual = colaPrioridad.peek()\r\n        colaPrioridad.deq()\r\n        if(cuadricula[posicionActual.i][posicionActual.j].visitado) continue\r\n        cuadricula[posicionActual.i][posicionActual.j].visitado = true\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicionActual.i][posicionActual.j].id\r\n        if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaLibre') animacion.clase = 'celdaVisitada'\r\n        else if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaConPeso') animacion.clase = 'celdaVisitadaConPeso'\r\n\r\n        if(cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaConPeso' ||\r\n        cuadricula[posicionActual.i][posicionActual.j].clase === 'celdaLibre') animaciones.push(animacion)\r\n        if(posicionActual.clase === 'puntoFinal') break\r\n        let i = 0\r\n        while(i < 4){\r\n            let posicionAdyacente = {i: posicionActual.i, j: posicionActual.j}\r\n            posicionAdyacente.i += movs[i][0]\r\n            posicionAdyacente.j += movs[i][1]\r\n            if(verificadorPosiciones.posicionValida({i: posicionAdyacente.i, j: posicionAdyacente.j}, cuadricula)){\r\n                posicionAdyacente.distancia = cuadricula[posicionAdyacente.i][posicionAdyacente.j].distancia\r\n                posicionAdyacente.visitado = cuadricula[posicionAdyacente.i][posicionAdyacente.j].visitado\r\n                posicionAdyacente.clase = cuadricula[posicionAdyacente.i][posicionAdyacente.j].clase\r\n                posicionAdyacente.previo = cuadricula[posicionAdyacente.i][posicionAdyacente.j].previo\r\n                posicionAdyacente.id = cuadricula[posicionAdyacente.i][posicionAdyacente.j].id\r\n                if(cuadricula[posicionAdyacente.i][posicionAdyacente.j].visitado === false){\r\n                    relajacion(posicionActual, posicionAdyacente)\r\n                }\r\n            }\r\n            i++\r\n        }\r\n    }\r\n    if(posicionActual.clase === 'puntoFinal') recrearCamino(cuadricula[posicionActual.previo.i][posicionActual.previo.j])\r\n    return animaciones\r\n}\r\nexport default dijkstra","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\dfs.js",["84","85"],"import verificadorPosiciones from './verificadorPosiciones'\r\nvar pila\r\nconst movs = [[-1, 0], [0, 1], [1, 0], [0, -1]]\r\nvar cuadricula = new Array(17)\r\nvar animaciones = []\r\nvar animacion = {}\r\nvar posicionInicial \r\n\r\n\r\nfunction inicializacion(){\r\n    animaciones = []\r\n    cuadricula = new Array(17)\r\n    let inicio = document.getElementsByClassName('puntoInicio')[0]\r\n    let id = 0\r\n    let i = 0\r\n    let j = 0\r\n    let iAux = 0\r\n    let jAux = 0\r\n    for(i = 0; i < cuadricula.length; i++){\r\n        cuadricula[i] = new Array(38)\r\n        for(j = 0; j < cuadricula[i].length; j++){\r\n            if(id == inicio.id){\r\n                iAux = i\r\n                jAux = j\r\n            }\r\n            cuadricula[i][j] = {id: id, visitado: false, clase: document.getElementById(id).className}\r\n            id ++\r\n        }\r\n    }\r\n    i = iAux\r\n    j = jAux\r\n    posicionInicial = {i: i, j: j}\r\n}\r\n\r\nfunction busqueda(posicion){\r\n    console.log(posicion)\r\n    if(!verificadorPosiciones.posicionValida(posicion, cuadricula) || cuadricula[posicion.i][posicion.j].visitado) return false\r\n    if(cuadricula[posicion.i][posicion.j].clase === 'puntoFinal') return true\r\n    if(cuadricula[posicion.i][posicion.j].clase === 'puntoInicio'){\r\n        console.log('puntoInicio')\r\n        cuadricula[posicion.i][posicion.j].visitado = true\r\n        let i = 0\r\n        while(i < 4){\r\n            let posicionSiguiente = {i: posicion.i, j: posicion.j}\r\n            posicionSiguiente.i += movs[i][0]\r\n            posicionSiguiente.j += movs[i][1]\r\n            if(busqueda(posicionSiguiente)) return true\r\n            i += 1\r\n        }\r\n    }else if(cuadricula[posicion.i][posicion.j].clase === 'celdaLibre' ||\r\n    cuadricula[posicion.i][posicion.j].clase === 'celdaConPeso'){\r\n        cuadricula[posicion.i][posicion.j].visitado = true\r\n        animacion = {}\r\n        animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n        animacion.clase = 'celdaVisitada'\r\n        animaciones.push(animacion)\r\n        let i = 0\r\n        while(i < 4){\r\n            let posicionSiguiente = {i: posicion.i, j: posicion.j}\r\n            posicionSiguiente.i += movs[i][0]\r\n            posicionSiguiente.j += movs[i][1]\r\n            if(busqueda(posicionSiguiente)){\r\n                animacion = {}\r\n                animacion.posicion = cuadricula[posicion.i][posicion.j].id\r\n                animacion.clase = 'celdaCamino'\r\n                animaciones.push(animacion)\r\n                return true\r\n            }\r\n            i += 1\r\n        }\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nfunction dfs() {\r\n    inicializacion()\r\n    busqueda(posicionInicial)\r\n    return animaciones\r\n}\r\nexport default dfs","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\patronesCaminos.js",["86"],"function laberintoAleatorio(){\r\n    var id = 0\r\n    for(var i = 0; i < 17; i++){\r\n        for(var j = 0; j < 38; j++){\r\n            let elemento = document.getElementById(id++)\r\n            if(elemento.className !== 'puntoInicio' && elemento.className !== 'puntoFinal'){\r\n                let posibilidad = Math.random() * (101 - 0) + 0;\r\n                if(posibilidad >= 70)\r\n                    elemento.className = 'celdaOcupada'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction laberintoAleatorioPesos(){\r\n    var id = 0\r\n    for(var i = 0; i < 17; i++){\r\n        for(var j = 0; j < 38; j++){\r\n            let elemento = document.getElementById(id++)\r\n            if(elemento.className !== 'puntoInicio' && elemento.className !== 'puntoFinal'){\r\n                let posibilidad = Math.random() * (101 - 0) + 0;\r\n                if(posibilidad >= 70)\r\n                    elemento.className = 'celdaConPeso'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default {laberintoAleatorio, laberintoAleatorioPesos}","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\Tutorial.jsx",["87","88","89","90","91"],"import { Modal, Button } from 'react-bootstrap';\r\nimport { useState } from 'react'\r\nimport imagenAyuda from '../imagenes/ayudar.png';\r\nimport moverPuntos from '../imagenes/gifs/moverPuntos.gif'\r\nimport ponerCeldasLibres from '../imagenes/gifs/ponerCeldasLibres.gif'\r\nimport ponerParedes from '../imagenes/gifs/ponerParedes.gif'\r\nimport ponerPesos from '../imagenes/gifs/ponerPesos.gif'\r\n\r\nfunction Tutorial() {\r\n    const [show, setShow] = useState(true)\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    var [indice, setInidice] = useState(0)\r\n\r\n\r\n    const cuerpo = [\r\n        <p>La barra superior corresponde a: <br></br>\r\n        1: ¿Como utilizar la aplicacion? <br></br>\r\n        2: Algoritmo de busqueda seleccionado <br></br>\r\n        3: Velocidad de la visualizacion <br></br>\r\n        4: Patron de obstaculos en la cuadricula <br></br>\r\n        5: [Reiniciar cuadricula] elimina los obstaculos y pesos de la cuadricula <br></br>\r\n        6: [Reiniciar camino] elimina la visualizacion del camino generada <br></br>\r\n        7: Inicia la visualizacion <br></br>\r\n        8: Detener la visualizacion <br></br>\r\n        9: Ir al repositorio del proyecto\r\n        </p>\r\n        ,\r\n        <div>\r\n            <p>\r\n                click izquierdo para mover los puntos de inicio y fin\r\n            </p>\r\n            <img src = {moverPuntos} width = {450}></img>\r\n        </div>\r\n        ,\r\n        <div>\r\n            <p>\r\n                click izquierdo para poner paredes\r\n            </p>\r\n            <img src = {ponerParedes} width = {450}></img>\r\n        </div>\r\n        ,\r\n        <div>\r\n            <p>\r\n                alt + click izquierdo para poner pesos\r\n                <br></br>\r\n                Los pesos funcionan con algunos algoritmos, los algoritmos que no los utilizen\r\n                Ignoraran los pesos y los convertirar en celdas libres <br></br>\r\n                Algoritmos que utilizan pesos: <br></br>\r\n                *: Algoritmo de dijkstra\r\n            </p>\r\n            <img src = {ponerPesos} width = {450}></img>\r\n        </div>\r\n        ,\r\n        <div>\r\n            <p>\r\n                shift + click para convertir las celdas, en celdas vacias\r\n            </p>\r\n            <img src = {ponerCeldasLibres} width = {450}></img>\r\n        </div>\r\n        ,\r\n        <p>\r\n            Ahora utiliza libremente la aplicacion\r\n        </p>\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <input type = 'image' src = {imagenAyuda} draggable = {false} onClick = {() =>{\r\n                handleShow()\r\n            }}>\r\n            </input>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Header closeButton className = 'bg-dark'>\r\n                    <Modal.Title>¿Como utilizar la aplicacion?</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className = 'bg-dark'>\r\n                    {cuerpo[indice]}\r\n                </Modal.Body>\r\n                <Modal.Footer className = 'bg-dark'>\r\n                    <Button variant = 'danger' onClick = {handleClose}>\r\n                        Quitar tutorial\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick = {() =>{\r\n                        if(indice > 0) setInidice(indice - 1)\r\n                    }}>\r\n                        Anterior\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick = {() =>{\r\n                        if(indice < cuerpo.length - 1) setInidice(indice + 1)\r\n                    }}>\r\n                        Siguiente\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default Tutorial","C:\\Users\\PC\\Desktop\\The Icy Spark\\Programacion\\visualizador-buscador-caminos\\src\\componentes\\algoritmos\\a.js",["92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":16},{"ruleId":"98","severity":1,"message":"102","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":64,"column":21,"nodeType":"105","endLine":64,"endColumn":67},{"ruleId":"106","severity":1,"message":"107","line":29,"column":22,"nodeType":"108","messageId":"109","endLine":29,"endColumn":24},{"ruleId":"106","severity":1,"message":"107","line":136,"column":42,"nodeType":"108","messageId":"109","endLine":136,"endColumn":44},{"ruleId":"106","severity":1,"message":"107","line":137,"column":48,"nodeType":"108","messageId":"109","endLine":137,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":25,"column":52,"nodeType":"108","messageId":"109","endLine":25,"endColumn":54},{"ruleId":"106","severity":1,"message":"107","line":25,"column":96,"nodeType":"108","messageId":"109","endLine":25,"endColumn":98},{"ruleId":"106","severity":1,"message":"110","line":39,"column":24,"nodeType":"108","messageId":"109","endLine":39,"endColumn":26},{"ruleId":"106","severity":1,"message":"110","line":39,"column":60,"nodeType":"108","messageId":"109","endLine":39,"endColumn":62},{"ruleId":"106","severity":1,"message":"110","line":47,"column":24,"nodeType":"108","messageId":"109","endLine":47,"endColumn":26},{"ruleId":"106","severity":1,"message":"110","line":47,"column":60,"nodeType":"108","messageId":"109","endLine":47,"endColumn":62},{"ruleId":"106","severity":1,"message":"110","line":54,"column":24,"nodeType":"108","messageId":"109","endLine":54,"endColumn":26},{"ruleId":"106","severity":1,"message":"110","line":54,"column":60,"nodeType":"108","messageId":"109","endLine":54,"endColumn":62},{"ruleId":"106","severity":1,"message":"107","line":47,"column":19,"nodeType":"108","messageId":"109","endLine":47,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":19,"column":1,"nodeType":"113","endLine":19,"endColumn":51},{"ruleId":"106","severity":1,"message":"107","line":24,"column":19,"nodeType":"108","messageId":"109","endLine":24,"endColumn":21},{"ruleId":"106","severity":1,"message":"110","line":58,"column":26,"nodeType":"108","messageId":"109","endLine":58,"endColumn":28},{"ruleId":"98","severity":1,"message":"114","line":2,"column":5,"nodeType":"100","messageId":"101","endLine":2,"endColumn":9},{"ruleId":"106","severity":1,"message":"107","line":22,"column":19,"nodeType":"108","messageId":"109","endLine":22,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":29,"column":1,"nodeType":"113","endLine":29,"endColumn":61},{"ruleId":"103","severity":1,"message":"104","line":34,"column":13,"nodeType":"105","endLine":34,"endColumn":52},{"ruleId":"103","severity":1,"message":"104","line":41,"column":13,"nodeType":"105","endLine":41,"endColumn":53},{"ruleId":"103","severity":1,"message":"104","line":53,"column":13,"nodeType":"105","endLine":53,"endColumn":51},{"ruleId":"103","severity":1,"message":"104","line":60,"column":13,"nodeType":"105","endLine":60,"endColumn":58},{"ruleId":"103","severity":1,"message":"115","line":70,"column":13,"nodeType":"105","endLine":72,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":33,"column":19,"nodeType":"108","messageId":"109","endLine":33,"endColumn":21},{"ruleId":"106","severity":1,"message":"107","line":37,"column":19,"nodeType":"108","messageId":"109","endLine":37,"endColumn":21},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'Tutorial' is defined but never used.","Identifier","unusedVar","'imagenAyuda' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'pila' is defined but never used.","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","no-global-assign","no-unsafe-negation"]